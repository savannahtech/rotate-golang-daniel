// Code generated by MockGen. DO NOT EDIT.
// Source: commandexecutor.go

// Package commandexecutormock is a generated GoMock package.
package commandexecutormock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCommandExecutor is a mock of CommandExecutor interface.
type MockCommandExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockCommandExecutorMockRecorder
}

// MockCommandExecutorMockRecorder is the mock recorder for MockCommandExecutor.
type MockCommandExecutorMockRecorder struct {
	mock *MockCommandExecutor
}

// NewMockCommandExecutor creates a new mock instance.
func NewMockCommandExecutor(ctrl *gomock.Controller) *MockCommandExecutor {
	mock := &MockCommandExecutor{ctrl: ctrl}
	mock.recorder = &MockCommandExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandExecutor) EXPECT() *MockCommandExecutorMockRecorder {
	return m.recorder
}

// AddCommands mocks base method.
func (m *MockCommandExecutor) AddCommands(commands []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCommands", commands)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCommands indicates an expected call of AddCommands.
func (mr *MockCommandExecutorMockRecorder) AddCommands(commands interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCommands", reflect.TypeOf((*MockCommandExecutor)(nil).AddCommands), commands)
}

// IsWorkerThreadAlive mocks base method.
func (m *MockCommandExecutor) IsWorkerThreadAlive() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsWorkerThreadAlive")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsWorkerThreadAlive indicates an expected call of IsWorkerThreadAlive.
func (mr *MockCommandExecutorMockRecorder) IsWorkerThreadAlive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsWorkerThreadAlive", reflect.TypeOf((*MockCommandExecutor)(nil).IsWorkerThreadAlive))
}

// Start mocks base method.
func (m *MockCommandExecutor) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockCommandExecutorMockRecorder) Start(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockCommandExecutor)(nil).Start), ctx)
}

// Stop mocks base method.
func (m *MockCommandExecutor) Stop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockCommandExecutorMockRecorder) Stop(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockCommandExecutor)(nil).Stop), ctx)
}
